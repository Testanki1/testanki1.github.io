name: 3D坦克测试服务器监测器

on:
  schedule:
    # 每 5 分钟执行一次
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  check-servers:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright and dependencies
        run: |
          npm i -D playwright
          npx playwright install --with-deps chromium

      - name: Run server check script
        id: check_script
        run: |
          # --- 动态创建浏览器检查脚本 (check_browser.js) ---
          cat << 'EOF' > check_browser.js
          const { chromium } = require('playwright');
          (async () => {
            const url = process.argv[2];
            if (!url) process.exit(1);
            let browser;
            try {
              browser = await chromium.launch();
              const context = await browser.newContext({ userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' });
              const page = await context.newPage();
              await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 60000 });
              await page.waitForTimeout(30000);
              const viewportSize = page.viewportSize();
              if (viewportSize) await page.mouse.click(viewportSize.width / 2, viewportSize.height / 2);
              await page.waitForTimeout(5000);
              const content = await page.content();
              if (/invite/i.test(content)) {
                console.log(JSON.stringify({ url: url, interactive_status: 'Closed' }));
              } else {
                console.log(JSON.stringify({ url: url, interactive_status: 'Open' }));
              }
            } catch (error) {
              console.log(JSON.stringify({ url: url, interactive_status: 'Offline' }));
            } finally {
              if (browser) await browser.close();
            }
          })();
          EOF

          # --- 配置 ---
          URL_EU_TEMPLATE="https://public-deploy{i}.test-eu.tankionline.com/browser-public/index.html"
          URL_RU_TEMPLATE="https://client-review-{i}-public.test-ru.tankionline.com/"
          STATE_FILE="server_status.json"
          RESULTS_DIR=$(mktemp -d)
          notifications=()
          available_servers=()
          new_status_json="{}"
          
          # --- 准备 URL 列表 ---
          urls=()
          for i in {1..10}; do
            urls+=("${URL_EU_TEMPLATE//\{i\}/$i}")
            urls+=("${URL_RU_TEMPLATE//\{i\}/$i}")
          done
          urls+=("https://test.ru.tankionline.com/play/?config-template=https://c{server}.ru.tankionline.com/config.xml&balancer=https://balancer.ru.tankionline.com/balancer&resources=https://s.ru.tankionline.com")

          # --- 读取旧状态 ---
          old_status_json=$(cat "$STATE_FILE" 2>/dev/null || echo "{}")
          
          # --- 第一阶段: 并行 CURL 检查 ---
          pids=()
          online_urls_for_browser_check=()
          echo "阶段 1: 开始并行 CURL 检查 ${#urls[@]} 个服务器..."
          for url in "${urls[@]}"; do
            (
              response=$(curl --insecure --silent --location --write-out "HTTP_CODE:%{http_code}" --max-time 15 "$url" || echo "HTTP_CODE:000")
              http_code=$(echo "$response" | sed -n 's/.*HTTP_CODE:\([0-9]\{3\}\)/\1/p')
              body=$(echo "$response" | sed 's/HTTP_CODE:[0-9]\{3\}$//')
              current_hash=$(echo "$body" | sha256sum | awk '{print $1}')
              filename=$(echo -n "$url" | md5sum | awk '{print $1}')
              echo "{\"http_code\": \"$http_code\", \"hash\": \"$current_hash\"}" > "$RESULTS_DIR/$filename.curl.json"
            ) &
            pids+=($!)
          done
          wait "${pids[@]}"
          echo "CURL 检查完成。"

          # --- 第二阶段: 并行 Playwright 检查 ---
          pids=()
          for url in "${urls[@]}"; do
            filename=$(echo -n "$url" | md5sum | awk '{print $1}')
            http_code=$(jq -r '.http_code' "$RESULTS_DIR/$filename.curl.json")
            if [[ "$http_code" != "404" && "$http_code" != "000" ]]; then
              online_urls_for_browser_check+=("$url")
            fi
          done
          echo "阶段 2: 开始并行 Playwright 检查 ${#online_urls_for_browser_check[@]} 个在线服务器..."
          for url in "${online_urls_for_browser_check[@]}"; do
            filename=$(echo -n "$url" | md5sum | awk '{print $1}')
            node check_browser.js "$url" > "$RESULTS_DIR/$filename.browser.json" &
            pids+=($!)
          done
          wait "${pids[@]}"
          echo "Playwright 检查完成。"

          # --- 第三阶段: 汇总结果并生成通知 ---
          echo "阶段 3: 汇总结果并比较状态..."
          for url in "${urls[@]}"; do
            filename=$(echo -n "$url" | md5sum | awk '{print $1}')
            curl_result=$(cat "$RESULTS_DIR/$filename.curl.json")
            http_code=$(echo "$curl_result" | jq -r '.http_code')
            current_hash=$(echo "$curl_result" | jq -r '.hash')
            interactive_status=""
            if [ -f "$RESULTS_DIR/$filename.browser.json" ]; then
              interactive_status=$(jq -r '.interactive_status' "$RESULTS_DIR/$filename.browser.json")
            fi
            
            final_status=""
            if [[ "$http_code" == "404" || "$http_code" == "000" ]]; then
              final_status="Offline"
            else
              final_status="$interactive_status"
            fi
            
            # 【修改】创建用于显示的中文状态变量
            display_status=""
            if [ "$final_status" == "Open" ]; then
              display_status="开放"
            elif [ "$final_status" == "Closed" ]; then
              display_status="封闭"
            fi

            if [ "$final_status" != "Offline" ]; then
              # 【修改】使用中文状态变量
              available_servers+=("<a href=\"$url\">$url</a> (状态: <b>$display_status</b>)")
            fi

            old_entry=$(echo "$old_status_json" | jq -r ".[\"$url\"] // \"null\"")
            old_status=$(echo "$old_entry" | jq -r ".status // \"null\"")
            old_hash=$(echo "$old_entry" | jq -r ".hash // \"null\"")
            message=""

            if [ "$final_status" != "$old_status" ]; then
                if [ "$old_status" != "null" ]; then
                    if [ "$final_status" == "Open" ]; then message="服务器已开放"; fi
                    if [ "$final_status" == "Closed" ]; then message="服务器已转为封闭测试"; fi
                    if [ "$final_status" == "Offline" ]; then message="服务器已关闭"; fi
                elif [ "$final_status" != "Offline" ]; then
                    # 【修改】使用中文状态变量
                    message="首次发现服务器 (状态: $display_status)"
                fi
            elif [ "$final_status" != "Offline" ] && [ "$old_hash" != "null" ] && [ "$current_hash" != "$old_hash" ]; then
                # 【修改】使用中文状态变量
                message="网页代码已更新 (状态: $display_status)"
            fi

            if [ -n "$message" ]; then
                notifications+=("- <a href=\"$url\">$url</a>: $message")
            fi
            
            new_status_json=$(echo "$new_status_json" | jq ". + {\"$url\": {\"status\": \"$final_status\", \"hash\": \"$current_hash\"}}")
          done

          rm -rf "$RESULTS_DIR"

          # --- 判断是否有变化并设置输出 ---
          if [ ${#notifications[@]} -gt 0 ]; then
            echo "发现服务器状态变化。"
            change_details=$(printf "%s<br>" "${notifications[@]}")
            available_list_header="<br><hr><b>当前可用服务器列表 (${#available_servers[@]} 个):</b><br>"
            if [ ${#available_servers[@]} -gt 0 ]; then
              available_list_body=$(printf "%s<br>" "${available_servers[@]}")
            else
              available_list_body="目前没有检测到可用的服务器。"
            fi
            full_notification_body="检测到以下服务器状态发生变化：<br>$change_details$available_list_header$available_list_body"

            echo "has_changes=true" >> $GITHUB_OUTPUT
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "notification_body<<$EOF" >> $GITHUB_OUTPUT
            echo "$full_notification_body" >> $GITHUB_OUTPUT
            echo "$EOF" >> $GITHUB_OUTPUT
            
            echo "$new_status_json" | jq '.' > "$STATE_FILE"
          else
            echo "所有服务器状态无变化。"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Send notification email
        if: steps.check_script.outputs.has_changes == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.qq.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "3D坦克测试服务器状态更新"
          to: ${{ secrets.MAIL_TO_1 }}
          from: GitHub Actions 监测器 <${{ secrets.MAIL_USERNAME }}>
          html_body: |
            你好，
            <br><br>
            ${{ steps.check_script.outputs.notification_body }}
            <br><br>
            此邮件由 GitHub Actions 自动发送。
            
      - name: Commit status file
        if: steps.check_script.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add server_status.json
          if git diff --staged --quiet; then
            echo "状态文件无变化，无需提交。"
          else
            git commit -m "chore: 更新服务器状态文件"
            git push
          fi
